generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email             String                @unique
  firstName         String                @map("first_name")
  lastName          String                @map("last_name")
  avatar            String?
  address           String?
  phone             String?
  createdAt         DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  chatRooms         ChatRoomParticipant[]
  readMessages      MessageReadBy[]
  sentMessages      Message[]             @relation("SentMessages")
  buyerOrders       Order[]               @relation("BuyerOrders")
  sellerOrders      Order[]               @relation("SellerOrders")
  posts             Post[]

  @@map("users")
}

model Post {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category     String
  title        String
  description  String
  condition    String
  amount       Decimal   @default(0) @db.Decimal(12, 2)
  isNegotiable Boolean?  @default(false) @map("is_negotiable")
  deliveryType String    @map("delivery_type")
  posterId     String?   @map("poster_id") @db.Uuid
  status       String?   @default("ACTIVE")
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  messages     Message[]
  orders       Order[]
  images       PostImage[]
  poster       User?     @relation(fields: [posterId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([posterId], map: "idx_posts_poster_id")
  @@map("posts")
}

model PostImage {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId    String    @map("post_id") @db.Uuid
  imageUrl  String    @map("image_url")
  imageType String?   @map("image_type")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([postId], map: "idx_post_images_post_id")
  @@map("post_images")
}

model ChatRoom {
  id           String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt    DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  participants ChatRoomParticipant[]
  messages     Message[]

  @@map("chat_rooms")
}

model ChatRoomParticipant {
  chatRoomId String    @map("chat_room_id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@id([chatRoomId, userId])
  @@map("chat_room_participants")
}

model Message {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatRoomId  String     @map("chat_room_id") @db.Uuid
  senderId    String?    @map("sender_id") @db.Uuid
  content     String?
  postId      String?    @map("post_id") @db.Uuid
  messageType String?    @default("TEXT") @map("message_type")
  createdAt   DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  readBy      MessageReadBy[]
  chatRoom    ChatRoom   @relation(fields: [chatRoomId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  post        Post?      @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  sender      User?      @relation("SentMessages", fields: [senderId], references: [id], onUpdate: Restrict)

  @@index([chatRoomId], map: "idx_messages_chat_room_id")
  @@index([senderId], map: "idx_messages_sender_id")
  @@map("messages")
}

model MessageReadBy {
  messageId String    @map("message_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  readAt    DateTime? @default(now()) @map("read_at") @db.Timestamptz(6)
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@id([messageId, userId])
  @@map("message_read_by")
}

model Order {
  id                   String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  buyerId              String     @map("buyer_id") @db.Uuid
  sellerId             String     @map("seller_id") @db.Uuid
  postId               String     @map("post_id") @db.Uuid
  shippingAddress      String     @map("shipping_address")
  shippingReceiver     String     @map("shipping_receiver")
  shippingPhone        String     @map("shipping_phone")
  paymentMethod        String     @map("payment_method")
  paymentTransactionId String?    @map("payment_transaction_id")
  paymentFee           Decimal?   @default(0) @map("payment_fee") @db.Decimal(12, 2)
  deliveryFee          Decimal?   @default(0) @map("delivery_fee") @db.Decimal(12, 2)
  serviceFee           Decimal?   @default(0) @map("service_fee") @db.Decimal(12, 2)
  tax                  Decimal?   @default(0) @map("tax") @db.Decimal(12, 2)
  total                Decimal    @map("total") @db.Decimal(12, 2)
  status               String?    @default("PENDING_PAYMENT")
  createdAt            DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  buyer                User       @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  post                 Post       @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  seller               User       @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([buyerId], map: "idx_orders_buyer_id")
  @@index([sellerId], map: "idx_orders_seller_id")
  @@map("orders")
}
