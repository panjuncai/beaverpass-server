generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                             String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                          String                @unique
  firstName                      String                @map("first_name")
  lastName                       String                @map("last_name")
  avatar                         String?
  address                        String?
  phone                          String?
  password                       String
  isVerified                     Boolean?              @default(false) @map("is_verified")
  verificationToken              String?               @map("verification_token")
  createdAt                      DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                      DateTime?             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  chatRooms                      ChatRoomParticipant[]
  readMessages                   MessageReadBy[]
  sentMessages                   Message[]             @relation("SentMessages")
  orders_orders_buyer_idTousers  orders[]              @relation("orders_buyer_idTousers")
  orders_orders_seller_idTousers orders[]              @relation("orders_seller_idTousers")
  posts                          Post[]

  @@map("users")
}

model Post {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category          String              @db.VarChar(50)
  title             String
  description       String
  condition         String              @db.VarChar(50)
  imageFront        String              @map("image_front")
  imageSide         String?             @map("image_side")
  imageBack         String?             @map("image_back")
  imageDamage       String?             @map("image_damage")
  priceAmount       Decimal?            @map("price_amount") @db.Decimal
  priceIsFree       Boolean?            @default(false) @map("price_is_free")
  priceIsNegotiable Boolean?            @default(false) @map("price_is_negotiable")
  deliveryType      String              @map("delivery_type") @db.VarChar(50)
  posterId          String?             @map("poster_id") @db.Uuid
  status            String?             @default("active") @db.VarChar(20)
  createdAt         DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  messages          Message[]
  orders            orders[]
  poster            User?               @relation(fields: [posterId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("posts")
}

model ChatRoom {
  id           String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt    DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  participants ChatRoomParticipant[]
  messages     Message[]

  @@map("chat_rooms")
}

model ChatRoomParticipant {
  chatRoomId  String   @map("chat_room_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  unreadCount Int?     @default(0) @map("unread_count")
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([chatRoomId, userId])
  @@map("chat_room_participants")
}

model Message {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  roomId      String?            @map("room_id") @db.Uuid
  senderId    String?            @map("sender_id") @db.Uuid
  content     String?
  postId      String?            @map("post_id") @db.Uuid
  messageType String?            @default("text") @map("message_type") @db.VarChar(20)
  createdAt   DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  readBy      MessageReadBy[]
  post        Post?              @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room        ChatRoom?          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender      User?              @relation("SentMessages", fields: [senderId], references: [id], onUpdate: NoAction)

  @@map("messages")
}

model MessageReadBy {
  messageId String    @map("message_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  readAt    DateTime? @default(now()) @map("read_at") @db.Timestamptz(6)
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([messageId, userId])
  @@map("message_read_by")
}

model orders {
  id                            String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  buyer_id                      String             @db.Uuid
  seller_id                     String             @db.Uuid
  post_id                       String             @db.Uuid
  title                         String
  price                         Decimal            @db.Decimal(12, 2)
  image_front                   String
  image_back                    String?
  image_left                    String?
  image_right                   String?
  shipping_address              String
  shipping_receiver             String
  shipping_phone                String
  payment_method                String
  payment_transaction_id        String?
  payment_fee                   Decimal?           @default(0) @db.Decimal(12, 2)
  delivery_fee                  Decimal?           @default(0) @db.Decimal(12, 2)
  service_fee                   Decimal?           @default(0) @db.Decimal(12, 2)
  tax                           Decimal?           @default(0) @db.Decimal(12, 2)
  total                         Decimal            @db.Decimal(12, 2)
  status                        String?            @default("pending_payment") @db.VarChar(20)
  created_at                    DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?          @default(now()) @db.Timestamptz(6)
  users_orders_buyer_idTousers  User               @relation("orders_buyer_idTousers", fields: [buyer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts                         Post               @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_orders_seller_idTousers User               @relation("orders_seller_idTousers", fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
